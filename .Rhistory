lm1_50 <- lm(fmla2, data=PC)
summary(lm1_50 )
lm2 <- step(lm1)
summary(lm2)
summary(lm1_50)
lm2_50 <- step(lm1_50)
summary(lm1_50)
summary(lm2)
lm2$rank
lm2_50$rank
summary(lm2_50)
str(summary(lm2))
182049672000 * 1e-9
set.seed(1)
vec <- runif(0, 1, 20)
vec <- runif(50, min = 1, max=2)
plot(vec[-1], vec[-50])
Nsim <- 1000
unif_seed <-  runif(1000, min=0, max=1)
mu <- 0
beta <- 1
Y <- mu - beta*log(1/unif_seed - 1)
X <- rlogis(n = 1000, location = 0, scale=1)
par(mfrow=c(1, 2))
hist(X, freq=F, "from R")
hist(Y, freq=F, "from inverse transform")
par(mfrow=c(1, 2))
hist(X, freq=F, main="from R")
hist(Y, freq=F, main="from inverse transform")
Nsim <- 10^4
unif_seed <-  runif(1000, min=0, max=1)
mu <- 0
beta <- 1
Y <- mu - beta*log(1/unif_seed - 1)
X <- rlogis(n = 1000, location = 0, scale=1)
par(mfrow=c(1, 2))
hist(X, freq=F, main="from R")
hist(Y, freq=F, main="from inverse transform")
Nsim <- 10^4
unif_seed <-  runif(1000, min=0, max=1)
mu <- 0
beta <- 1
Y <- mu - beta*log(1/unif_seed - 1)
X <- rlogis(n = Nsim, location = 0, scale=1)
par(mfrow=c(1, 2))
hist(X, freq=F, main="from R")
hist(Y, freq=F, main="from inverse transform")
Nsim <- 10^4
unif_seed <-  runif(Nsim, min=0, max=1)
mu <- 0
beta <- 1
Y <- mu - beta*log(1/unif_seed - 1)
X <- rlogis(n = Nsim, location = 0, scale=1)
par(mfrow=c(1, 2))
hist(X, freq=F, main="from R")
hist(Y, freq=F, main="from inverse transform")
Nsim <- 10^4
unif_seed <-  runif(Nsim, min=0, max=1)
mu <- 0.9
beta <- 1.5
Y <- mu - beta*log(1/unif_seed - 1)
X <- rlogis(n = Nsim, location = mu, scale=beta)
par(mfrow=c(1, 2))
hist(X, freq=F, main="from R")
hist(Y, freq=F, main="from inverse transform")
Nsim <- 10^4
mu <- 0
sigma <- 1
pi <- 3.141592653
unif_seed <-  runif(Nsim, min=0, max=1)
Y <- sigma*(tan(mu-0.5)*pi)+mu
X <- rcauchy(n = Nsim, location = mu, scale = sigma)
par(mfrow=c(1, 2))
hist(X, freq=F, main="from R")
hist(Y, freq=F, main="from inverse transform")
Y <- sigma*tan((mu-0.5)*pi)+mu
X <- rcauchy(n = Nsim, location = mu, scale = sigma)
par(mfrow=c(1, 2))
hist(X, freq=F, main="from R")
hist(Y, freq=F, main="from inverse transform")
Y <- sigma*tan((unif_seed-0.5)*pi)+mu
X <- rcauchy(n = Nsim, location = mu, scale = sigma)
par(mfrow=c(1, 2))
hist(X, freq=F, main="from R")
hist(Y, freq=F, main="from inverse transform")
Nsim <- 10^4
mu <- 0
sigma <- 1
pi <- 3.141592653
unif_seed <-  runif(Nsim, min=0, max=1)
Y <- sigma*tan((unif_seed-0.5)*pi)+mu
X <- rcauchy(n = Nsim, location = mu, scale = sigma)
par(mfrow=c(1, 2))
hist(X, freq=F, main="from R")
hist(Y, freq=F, main="from inverse transform")
Nsim <- 10^4
mu <- 20
sigma <- 50
pi <- 3.141592653
unif_seed <-  runif(Nsim, min=0, max=1)
Y <- sigma*tan((unif_seed-0.5)*pi)+mu
X <- rcauchy(n = Nsim, location = mu, scale = sigma)
par(mfrow=c(1, 2))
hist(X, freq=F, main="from R")
hist(Y, freq=F, main="from inverse transform")
rcauchy
Nsim <- 10^4
pi <- 3.141592653
U1 <- runif(Nsim, min=0, max=1)
U2 <- runif(Nsim, min=0, max=1)
X1 = sqrt(-2*log(U1)) * cos(2*pi*U2)
X2 = sqrt(-2*log(U1)) * sin(2*pi*U2)
hist(c(X1, X2))
hist(X1)
Nsim <- 10^3
Z <- vector()
for(i in 1:Nsim){
U <- runif(12, min=0, max=1)
Z_temp <- sum(U)
Z <- c(Z, Z_temp)
}
Nsim <- 10^4
Z <- vector()
for(i in 1:Nsim){
U <- runif(12, min=0, max=1)
Z_temp <- sum(U)
Z <- c(Z, Z_temp)
}
mean(Z)
Nsim <- 10^4
Z <- vector()
for(i in 1:Nsim){
U <- runif(12, min=-0.5, max=0.5)
Z_temp <- sum(U)
Z <- c(Z, Z_temp)
}
mean(Z)
sd(Z)
hist(Z)
Sigma=cov(matrix(rnorm(30),nrow=10))
Sigma
A=t(chol(Sigma))
x=A%*%rnorm(3)
x
?rmnorm
library(rmnorm)
install.packages("rmnorm ")
install.packages("rmnorm")
install.packages("mnormt")
library(mnormt)
?rmnorm
matrix(rnorm(30),nrow=10)
results <- matrix(NA, nrow=100, ncol=3)
for(i in 1:100){
x=A%*%rnorm(3)
results[i, ]<- x
}
cov(results)
Sigma
system.time(test1())
test1 <- function(){
results <- matrix(NA, nrow=100, ncol=3)
for(i in 1:100){
x=A%*%rnorm(3)
results[i, ]<- x
}
}
system.time(test1())
results2 <- rmnorm(n=100, mean=rep(0, 3), varcov = Sigma)
cov(results2)
results2
test1 <- function(){
results <- matrix(NA, nrow=1000, ncol=3)
for(i in 1:100){
x=A%*%rnorm(3)
results[i, ]<- x
}
}
system.time(test1())
library(mnormt)
test2 <- function(){
results2 <- rmnorm(n=1000, mean=rep(0, 3), varcov = Sigma)
}
system.time(test2())
results2 <- rmnorm(n=1000, mean=rep(0, 3), varcov = Sigma)
results <- matrix(NA, nrow=1000, ncol=3)
for(i in 1:1000){
x=A%*%rnorm(3)
results[i, ]<- x
}
cov(results1)
cov(results)
cov(results2)
?dbeta
?optimize
f <- function (x, a) (x - a)^2
xmin <- optimize(f, c(0, 1), tol = 0.0001, a = 1/3)
xmin
?dnorm
optimize(f=function(x){dnorm(x, mean=0, sd=1)}, interval = c(-3, 3), max=T)$objective
optimize(f=function(x){dnorm(x, mean=0, sd=1)}, interval = c(-3, 3), maximum = =T)$objective
optimize(f=function(x){dnorm(x, mean=0, sd=1)}, interval = c(-3, 3), maximum =T)$objective
Nsim <- 10^4
mu=0
sigma=1
u <- runif(Nsim)*M
y <- runif(Nsim, min=0, max=1)
x <-y[u < dnorm(y, mean=0, sd=1)]
M <- 0.4
Nsim <- 10^4
mu=0
sigma=1
u <- runif(Nsim)*M
y <- runif(Nsim, min=0, max=1)
x <-y[u < dnorm(y, mean=0, sd=1)]
hist(x)
M <- 0.4
Nsim <- 10^4
mu=0
sigma=1
u <- runif(Nsim)*M
y <- runif(Nsim, min=-3, max=3)
x <-y[u < dnorm(y, mean=0, sd=1)]
hist(x)
nrow(x)/Nsim
length(x)/Nsim
ch=function(la){
integrate(function(x){x^(la-1)*exp(-x)},0,Inf)$val}
plot(lgamma(seq(.01,10,le=100)),log(apply(as.matrix(
seq(.01,10,le=100)),1,ch)),xlab="log(integrate(f))",
ylab=expression(log(Gamma(lambda))),pch=19,cex=.6)
library(data.table)
?readRDS
?readr
?fread
results <- fread(file="combine_FAM-HE_UKB_Height.fastFAM.assoc", head=T, stringsAsFactors = F)
setwd("~/Desktop/Tinaroo_UKB_results/Height/FAM_HE")
results <- fread(file="combine_FAM-HE_UKB_Height.fastFAM.assoc", head=T, stringsAsFactors = F)
head(results)
str(results)
names(results) <- c("CHR", "SNP",	"POS",	"A1", "A2", "AF1",	"beta",	"se",	"p")
head(results)
results <- results[results$AF1 >= 0.001 & results$AF1 <= 0.999, ]
results <- results[nchar(results$A1) == 1 & nchar(results$A2) ==1, ]
lambda <- estlambda(results$p, method="median")
library(GenABEL)
lambda <- estlambda(results$p, method="median")
sum(results$p <= 5e-8)
lambda
sum(results$AF1 >= 0.01 & results$AF1 <= 0.99)
write.table(results, file="clean_combine_FAM-HE_UKB_Height.fastFAM.assoc", row.names = F, quote=F, sep="\t")
results <- results[results$AF1 >= 0.01 & results$AF1 <= 0.99, ]
lambda <- estlambda(results$p, method="median")
lambda
getwd()
summary(results$p)
setwd("~/Documents/GitHub/Conjugate_Gradient_Method")
raw_geno <- read.table(file="chr_19.snps", head=T, stringsAsFactors = F)
rm(results)
View(raw_geno)
#' This is a test script for BLUP implementation of the CG method.
raw_geno <- read.table(file="chr_19.snps", head=T, stringsAsFactors = F, na.strings = "N")
View(raw_geno)
str(raw_geno)
str(raw_geno[,1:5])
strsub(raw_geno$ALLELES, 1, 1)
substr(raw_geno$ALLELES[1:5], 1, 1)
raw_geno$A1 <- substr(raw_geno$ALLELES, 1, 1)
substr(raw_geno$ALLELES[1:5], 3, 3)
raw_geno$A1 <- substr(raw_geno$ALLELES, 3, 3)
raw_geno$A1 <- substr(raw_geno$ALLELES, 1, 1)
raw_geno$A2 <- substr(raw_geno$ALLELES, 3, 3)
names(raw_geno)
geno2 <- read.table(file="chr_19.emma", head=F, stringsAsFactors = F)
View(geno2)
raw_geno <- read.table(file="chr_19.snps", head=T, stringsAsFactors = F, na.strings = "N")
names(geno2) <- names(raw_geno)[-1:4]
names(geno2) <- names(raw_geno)[-(1:4)]
row.names(geno2) <- raw_geno$SNP_ID
?apply
cal_miss <- function(x){
sum(is.na(x))/length(x)
}
apply(X = geno2[1:5, ], MARGIN = 1, FUN = cal_miss)
length(geno2[1, ])
sum(is.na(geno2[1, ]))
sum(apply(X = geno2, MARGIN = 1, FUN = cal_miss) < 0.1)
sum(apply(X = geno2, MARGIN = 1, FUN = cal_miss) > 0.1)
sum(apply(X = geno2, MARGIN = 2, FUN = cal_miss) > 0.1)
sum(apply(X = geno2, MARGIN = 2, FUN = cal_miss) <0.05)
sum(apply(X = geno2, MARGIN = 2, FUN = cal_miss) < 0.1)
idx <- which(apply(X = geno2, MARGIN = 2, FUN = cal_miss) < 0.1)   # 217
geno2_clean <- geno2[, idx]
idx <- which(apply(X = geno2_clean, MARGIN = 1, FUN = cal_miss) < 0.05)
geno2_clean <- geno2_clean[, idx]
idx <- which(apply(X = geno2_clean, MARGIN = 1, FUN = cal_miss) < 0.05)
geno2_clean <- geno2_clean[idx,]
View(geno2_clean)
geno2_clean <- t(geno2_clean)
geno2_clean <- as.data.frame(geno2_clean)
View(geno2_clean)
causal_idx <- sample(1:2846, size=50)
causal_idx
causal_idx <- sort(causal_idx)
causal_idx
idx <- which(apply(X = geno2_clean[, causal_idx], MARGIN = 2, FUN = cal_maf) < 0.01)   # 217 indi left
cal_maf <- function(x){
sum(x, na.rm=T)/length(x)
}
idx <- which(apply(X = geno2_clean[, causal_idx], MARGIN = 2, FUN = cal_maf) < 0.01)   # 217 indi left
set.seed(50)
causal_idx <- sample(1:2846, size=50)
causal_idx <- sort(causal_idx)
cal_maf <- function(x){
sum(x, na.rm=T)/length(x)
}
idx <- which(apply(X = geno2_clean[, causal_idx], MARGIN = 2, FUN = cal_maf) < 0.01)   # 6 left
set.seed(50)
causal_idx <- sample(1:2846, size=50)
causal_idx <- sort(causal_idx)
# we need to exclude those causal SNPs with low MAF since they are less representative
cal_maf <- function(x){
sum(x, na.rm=T)/length(x)
}
idx <- which(apply(X = geno2_clean[, causal_idx], MARGIN = 2, FUN = cal_maf) < 0.01)   # 6 left
idx <- which(eval_vector < 0.01 | eval_vector >0.99)   # 6 with low
eval_vector <- apply(X = geno2_clean[, causal_idx], MARGIN = 2, FUN = cal_maf)
idx <- which(eval_vector < 0.01 | eval_vector >0.99)   # 6 with low
causal_idx <- causal_idx[-idx]
set.seed(60)
causal_idx_add <- sample(1:2846, size=6)
causal_idx <- sort(union(causal_idx_add, causal_idx))
eval_vector <- apply(X = geno2_clean[, causal_idx], MARGIN = 2, FUN = cal_maf)
idx <- which(eval_vector < 0.01 | eval_vector >0.99)   # 6 SNPs with low MAF need to be excluded
effect <- rnorm(n = length(causal_idx))
g <- geno2_clean[, causal_idx] %*% effect
head(geno2_clean[, causal_idx])
g <- as.matrix(geno2_clean[, causal_idx]) %*% effect
View(g)
causal_geno <- geno2_clean[, causal_idx]
causal_geno[is.na(causal_geno)] <- 0
g <- causal_geno %*% effect
set.seed(70)
effect <- rnorm(n = length(causal_idx))
causal_geno <- geno2_clean[, causal_idx]
causal_geno <- as.matrix(causal_geno)
causal_geno[is.na(causal_geno)] <- 0
g <- causal_geno %*% effect
View(g)
setwd("~/Documents/GitHub/Conjugate_Gradient_Method")
raw_geno <- read.table(file="chr_19.snps", head=T, stringsAsFactors = F, na.strings = "N")  # the ACTG genotype with SNPid, strain names, etc
geno2 <- read.table(file="chr_19.emma", head=F, stringsAsFactors = F)   # the 0, 1, 2 format genotype
## the raw genotype contains 3247 SNPs and 251 indi
h2 <- 0.6
nSNPs <- 50
## first we need to do some cleaning job for the raw genotype.
# 1. recode the genotype into 0, 1, 2
names(geno2) <- names(raw_geno)[-(1:4)]
row.names(geno2) <- raw_geno$SNP_ID
# 2. delete those SNPs with high missingness and strains with high missingness
cal_miss <- function(x){
sum(is.na(x))/length(x)
}
# individual
idx <- which(apply(X = geno2, MARGIN = 2, FUN = cal_miss) < 0.1)   # 217 indi left
geno2_clean <- geno2[, idx]
# SNPs
idx <- which(apply(X = geno2_clean, MARGIN = 1, FUN = cal_miss) < 0.05)  # 2846 SNPs left
geno2_clean <- geno2_clean[idx,]
# 3. select the causal variants
geno2_clean <- t(geno2_clean)
geno2_clean <- as.data.frame(geno2_clean)
# 50 causal SNPs
set.seed(50)
causal_idx <- sample(1:2846, size=nSNPs)
causal_idx <- sort(causal_idx)
# we need to exclude those causal SNPs with low MAF since they are less representative
cal_maf <- function(x){
sum(x, na.rm=T)/length(x)
}
eval_vector <- apply(X = geno2_clean[, causal_idx], MARGIN = 2, FUN = cal_maf)
idx <- which(eval_vector < 0.01 | eval_vector >0.99)   # 6 SNPs with low MAF need to be excluded
causal_idx <- causal_idx[-idx]
set.seed(60)
causal_idx_add <- sample(1:2846, size= nSNPs - lenght(idx))
causal_idx <- sort(union(causal_idx_add, causal_idx))
eval_vector <- apply(X = geno2_clean[, causal_idx], MARGIN = 2, FUN = cal_maf)
idx <- which(eval_vector < 0.01 | eval_vector >0.99)   # None
# thus "causal_idx" will be used as our calsual variants
# 4. simulate phenotype,  we will set the h2 to 0.6 with 50 causal snps.
set.seed(70)
effect <- rnorm(n = length(causal_idx))  # effect size for 50 SNPs
causal_geno <- geno2_clean[, causal_idx]
causal_geno <- as.matrix(causal_geno)
causal_geno[is.na(causal_geno)] <- 0
g <- causal_geno %*% effect    # the total genetic value for each individual
var(g)
var_e <- var(g)/h2 - var(g)
var_e
env <- rnorm(n = nrow(geno2_clean), sd=sqrt(var_e))
pheno <- g +  env
View(pheno)
pheno <- scale(g +  env)
set.seed(70)
effect <- rnorm(n = length(causal_idx))  # effect size for 50 SNPs
causal_geno <- geno2_clean[, causal_idx]
causal_geno <- as.matrix(causal_geno)
causal_geno[is.na(causal_geno)] <- 0
g <- causal_geno %*% effect    # the total genetic value for each individual
var_e <- var(g)/h2 - var(g)
set.seed(80)
env <- rnorm(n = nrow(geno2_clean), sd=sqrt(var_e))
pheno <- scale(g +  env)
View(geno2_clean)
pheno <- cbind(row.names(geno2_clean), pheno, g)
View(pheno)
summary(lm(pheno[,2] ~ pheno[,3]))
pheno <- as.data.frame(pheno)
summary(lm(pheno[,2] ~ pheno[,3]))
str(pheno)
names(pheno) <- c("FID", "pheno", "genetic_value")
pheno$FID <- as.character(pheno$FID)
pheno$pheno <- as.numeric(as.character(pheno$pheno))
pheno$genetic_value <- as.numeric(as.character(pheno$genetic_value))
summary(lm(pheno[,2] ~ pheno[,3]))
write.table(pheno, file="simulated_phenotype.pheno", quote=F, row.names = F, sep="\t")
View(geno2_clean)
write.table(geno2_clean, file="clean_genotype.geno", quote=F, row.names = F, sep="\t")
rm(list=ls())
getwd()
setwd("~/Documents/GitHub/Conjugate_Gradient_Method")
source(file = "Conjugate_Gradient_Method.R")
source(file = "Conjugate_Gradient_Method.R")
rm(list=ls())
source(file = "Conjugate_Gradient_Method.R")
geno <- read.table(file = "clean_geno_pheno/clean_genotype.geno", head=T, stringsAsFactors = F)
View(geno)
#' This is a test script for BLUP implementation of the CG method.
#' The genotype data are from "Mouse HapMap Imputed Genotype Resource"
#'  URL: http://mouse.cs.ucla.edu/mousehapmap/emma.html
#' We will use the Chr19 genotype (~3k SNPs and 251 strains) and use it to
#'  simulate an additive phenotype. We will then run BLUP using CG on 200 strains (training set)
#'  and evaluate the prediction power using the BLUP predictor.
#'
#' by Longda Jiang (longda.jiang@uq.edu.au), on Oct 20 2017 .
#'
setwd("~/Documents/GitHub/Conjugate_Gradient_Method")
raw_geno <- read.table(file="raw_genotype_Mouse_HapMap/chr_19.snps", head=T, stringsAsFactors = F, na.strings = "N")  # the ACTG genotype with SNPid, strain names, etc
geno2 <- read.table(file="raw_genotype_Mouse_HapMap/chr_19.emma", head=F, stringsAsFactors = F)   # the 0, 1, 2 format genotype
## the raw genotype contains 3247 SNPs and 251 indi
h2 <- 0.6
nSNPs <- 50
## first we need to do some cleaning job for the raw genotype.
# 1. recode the genotype into 0, 1, 2
names(geno2) <- names(raw_geno)[-(1:4)]
row.names(geno2) <- raw_geno$SNP_ID
# 2. delete those SNPs with high missingness and strains with high missingness
cal_miss <- function(x){
sum(is.na(x))/length(x)
}
# individual
idx <- which(apply(X = geno2, MARGIN = 2, FUN = cal_miss) < 0.1)   # 217 indi left
geno2_clean <- geno2[, idx]
# SNPs
idx <- which(apply(X = geno2_clean, MARGIN = 1, FUN = cal_miss) < 0.05)  # 2846 SNPs left
geno2_clean <- geno2_clean[idx,]
# 3. select the causal variants
geno2_clean <- t(geno2_clean)
geno2_clean <- as.data.frame(geno2_clean)
# 50 causal SNPs
set.seed(50)
causal_idx <- sample(1:2846, size=nSNPs)
causal_idx <- sort(causal_idx)
# we need to exclude those causal SNPs with low MAF since they are less representative
cal_maf <- function(x){
sum(x, na.rm=T)/length(x)
}
eval_vector <- apply(X = geno2_clean[, causal_idx], MARGIN = 2, FUN = cal_maf)
idx <- which(eval_vector < 0.01 | eval_vector >0.99)   # 6 SNPs with low MAF need to be excluded
causal_idx <- causal_idx[-idx]
set.seed(60)
causal_idx_add <- sample(1:2846, size= nSNPs - lenght(idx))
causal_idx <- sort(union(causal_idx_add, causal_idx))
eval_vector <- apply(X = geno2_clean[, causal_idx], MARGIN = 2, FUN = cal_maf)
idx <- which(eval_vector < 0.01 | eval_vector >0.99)   # None
# thus "causal_idx" will be used as our calsual variants
# 4. simulate phenotype,  we will set the h2 to 0.6 with 50 causal snps.
set.seed(70)
effect <- rnorm(n = length(causal_idx))  # effect size for 50 SNPs
causal_geno <- geno2_clean[, causal_idx]
causal_geno <- as.matrix(causal_geno)
causal_geno[is.na(causal_geno)] <- 0
g <- causal_geno %*% effect    # the total genetic value for each individual
var_e <- var(g)/h2 - var(g)
set.seed(80)
env <- rnorm(n = nrow(geno2_clean), sd=sqrt(var_e))
pheno <- scale(g +  env)
# 5. we will now save this simulated pheno file and the clean genotype file. we will do the BLUP in my next script.
pheno <- cbind(row.names(geno2_clean), pheno, g)
pheno <- as.data.frame(pheno)
names(pheno) <- c("FID", "pheno", "genetic_value")
pheno$FID <- as.character(pheno$FID)
pheno$pheno <- as.numeric(as.character(pheno$pheno))
pheno$genetic_value <- as.numeric(as.character(pheno$genetic_value))
write.table(pheno, file="clean_geno_pheno/simulated_phenotype.pheno", quote=F, row.names = F, sep="\t")
write.table(geno2_clean, file="clean_geno_pheno/clean_genotype.geno", quote=F, row.names = T, sep="\t")
rm(list=ls())
geno <- read.table(file = "clean_geno_pheno/clean_genotype.geno", head=T, stringsAsFactors = F)
View(geno)
pheno <- read.table(file="clean_geno_pheno/simulated_phenotype.pheno", head=T, stringsAsFactors = F)
View(pheno)
View(pheno)
